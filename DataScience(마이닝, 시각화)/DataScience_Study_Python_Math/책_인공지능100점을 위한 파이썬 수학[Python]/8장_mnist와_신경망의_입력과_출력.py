# -*- coding: utf-8 -*-
"""8장_MNIST와 신경망의 입력과 출력.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jZOM9-FdFnzVTV3z63XXxGapFDOnGxSH
"""

#8.4 행렬계산을 위한 파이썬 코드|

#8.4 행렬계산을 위한 파이썬 코드_1
import numpy as np
from numpy.linalg import inv

A=np.array([[1,1],
           [2,3]])

B=np.array([[1100],
           [2800]])

invA = inv(A)
print(np.dot(invA, B))

#8.4 행렬계산을 위한 파이썬 코드_2
import numpy as np

A = np.array([[1,1],
              [2,3]])
B = np.array([[1100],
             [2800]])

invA = np.linalg.inv(A)
print(np.dot(invA,B))

#8.4 행렬계산을 위한 파이썬 코드_3
import numpy as np
from numpy.linalg import inv

A = np.array([[1,1,1,1],
              [5,2,4,7],
              [0,1,1,2],
              [5,2,2,3]])


B = np.array([[2350],
              [10600],
              [2450],
              [6800]])

invA = inv(A)
print(np.dot(invA, B))

#8.4 행렬계산을 위한 파이썬 코드_4
#전치행렬을 만드는 방법
import numpy as np

#(1)행렬을 만들고
A = np.array([[1,1],
              [2,3]])

print("A = \n",A)
print("A.T =\n",A.T) #(2)행렬이름의 뒤에 .T를 붙인다

#8.6 무작위 데이터로 신경망함수 만들기
#(8.5는 이론설명으로 생략)

#1.keras에서 mnist데이터 읽어오기
import numpy as np
from keras.datasets import mnist
(x_train,y_train),(x_test,y_test) = mnist.load_data()

#데이터 포멧은 60000, 28,28 / 10000, 28, 28
#데이터를 28x28에서 784으로 변경
x_train = x_train.reshape(60000,784)
x_test = x_test.reshape(10000, 784)

#2.Hidden layer : W,b 초기화 [W1, W2, B1, B2]
def init_mnistbw2(layer_x, layer_h, layer_y):
  matrix_nn = {}
  matrix_nn = dict(B1=np.random.rand(layer_h),
                   B2=np.random.rand(layer_y),
                   W1=np.random.rand(layer_x,layer_h),
                   W2=np.random.rand(layer_h,layer_y)
                  )
  return matrix_nn


#3.활성함수
def sigmoid(x):
    return 1 / (1+np.exp(-x))
    
#4.소프트맥스
def softmax(X):
    X = X.T - np.max(X.T, axis=0)
    return (np.exp(X) / np.sum(np.exp(X), axis=0)).T

#5.predict
def predict(X):
  A=sigmoid(np.dot(X,W1)+B1)
  B=sigmoid(np.dot(A,W2)+B2)
  return softmax(B)  



#6.process
#ibw = init_mnistbw2(784,50,10)
#W1,W2,B1,B2 = ibw['W1'],ibw['W2'],ibw['B1'],ibw['B2']
#accuracy=0

#for i in range(len(x_test)) : #10,000
#  y= predict(x_test[i])
#  p = np.argmax(y)
#  if p == y_test[i]:
#    accuracy = accuracy +1

#print("Acc = ", str(float(accuracy/len(x_test))))

# process
ibw = init_mnistbw2(784,50,10)
W1, W2, B1, B2 = ibw['W1'], ibw['W2'], ibw['B1'], ibw['B2']
accuracy = 0

for i in range(len(x_test)):  # 10,000
    y = predict(x_test[i])
    p = np.argmax(y)
    if p == y_test[i]:
        accuracy = accuracy + 1

print("Acc = ", str(float(accuracy/len(x_test))))   # 0.1 근처의 값