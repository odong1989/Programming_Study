# -*- coding: utf-8 -*-
"""1.2.현금흐름, 이자율과 시간가치.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1atYl1E5qmUy1hKZjUT8Pf43EG5TTX0O8
"""

#단리이자 계산
#단리이자 공식 : 원금 x(1+이율 x 기간)

#(1) 원금 : 1000만원
#(2) 이율 : 연간 5%
#(3) 기간 : 1년
#(4) 1년 후 인출액 = 1000만원 x(1+5% x1) = 10,500,000dnjs


#변수 a에 예금액을 입력한다.
a=1000

#1년간 이자 계산이 12회 이뤄지므로n=12이다.
n=12

#1년간 이자율5%를 12로 나눠 월간 이자율로 바꾼다.
#이자 계산도 월간, 이자율도 월간으로 일치시키는 것이다.
r = 0.05/n

#이자율 계산 횟수가 늘어났지만 게산 방법은 종전과 같다.
s_simple = a*(1+r*n)
print(s_simple)

#복리 계산
#원금 : 1000만원
#이율 : (월간)5% /12
#기간 : 12개월
#1년 후 인출액 : 1000만원 x (1+(5%/12))^12 = 10,511,619원

#5%이자율을 월 단위로 복리 계산하는 경우 
#변수 a에 예금액을 입력한다.
a=1000

#이자계산횟수가 12회 이뤄지므로n=12이다.
n=12

#이자율은 5%이므로 0.05
r = 0.05

#복리식에 따라 복리 계산실시.
#r/n은 이자 횟수별 이자율을 계산.(**는 제곱연산자. n을 제곱연산한다.)
s_compound = a*(1+(r/n) ) **n #단리의 경우 : s_simple = a*(1+r*n)
print(s_compound)

#연속복리
#연속복리 공식 : 원금 * e^r
#복리 횟수가 늘어날수록, 값은 어느값(오일러상수를 뜻함)에 근접하게 됨을 알 수 있다.

#파이선의 수학모듈인 math에서는 오일러상수e를 제공한다.
import math

#앞서 살펴본 코드와 같이 연속복리에 따른 원금을 계산한다.
#원금 : amount
#이자율 : rate
#기간 : n 
a=1# amount = 1
r=1.0 #rate = 1.0

#기간이 1인 경우(1년 복리)
n=1
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 2인 경우(6개월 복리)
n=2
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 4인 경우(분기별 복리)
n=4
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 12인 경우(월 복리)
n=12
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 52인 경우(매주 복리)
n=52
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 365인 경우(매일 복리)
n=365
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 8760인 경우(매시간 복리)
n=8760
c_compound = a*(1+r/n)**n
print(c_compound)

#기간이 525600인 경우(매초 복리)
n=525600
c_compound = a*(1+r/n)**n
print(c_compound)