# -*- coding: utf-8 -*-
"""Financial_AI_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-SSgPaANV3pmTe9TOESYxANjFetsNUmO
"""

# 수업명 : AI 금융 - 기말고사(Kmooc)
# 제출일 : 2021년 08월 29일 
# 수험자 : 김보성
# 연락처 : kwunodong@gmail.com

# 비 고 : 문제 코드의 풀이를 위한 주석들이 작성되어있습니다.

# 금융 AI 기말고사 - 주의내용 및 시험목표 안내(출처:fnal_finai)
# 1.주의사항 
# – 주어진 ipynb 파일을 참고하여, 문제를 코딩하여 실행시켜 결과를 출력하여 최종 ipynb 파일을 업로드 해주세요. 
# – 파일은 구글 Colab에서 실행시켜주세요. 

# 2. 기말고사 - 기본사항 안내
# 본 기말고사는 한국거래소에 있는 주식을 대상으로 모멘텀 투자전략의 수익률을 추정해보고자 한다. 
# 예를 들어서, 모멘텀 계산방식은 다음과 같다 
# : 시점 t에서, (한 달 모멘텀 수익률) = (t − 23) 에서 t 시점까지의 종가(Close) 수익률). 
# (1)한 달 기간은 거래일 기준으로 23일로 가정하자. 
# (2)데이터는 ”FinanceDataReader”를 통해서 다운받도록 하자. 
#   (모멘텀 계산 기간: 2010.1.4 – 2020.11.30; 데이터 주기 (frequency) : daily)

#  =====  기말고사 시작   ============================================================================================

# 각 문제는 각각의 코드에 나뉘어 있습니다.
# 라이브러리는 각 문제에 선언하고 실시합니다.

# [문제 1] (데이터 준비) KOSPI 지수와 개별 주식별로 일별로 두 가지 종류의 데이터를 생성하시오. 다음 아래의 2개문항을 실시하시오.
# [1.1] KOSPI 지수와 개별 주식별로 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 

# 문제1의 필요 라이브러리 선언
import pandas_datareader.data as web  # 야후 Finance로 계속 시도하였으나 에러만 발생하는 관계로 Naver Finance로 대체합니다.
                                      # 참고 : https://pandas-datareader.readthedocs.io/en/latest/remote_data.html


# 1.1.1. 코스피지수

#1.1.2. 임의의 주식 출력
#타겟 



Indf = web.DataReader('005930', 'naver', start='2019-09-10', end='2019-10-09')



# [1.1.2] 개별주식 지수- 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
#        본 작성자는 아래와 같은 칼럼으로 출력하도록 할 예정.
#        | 거래일자 |  KOSPI 지수의 종가(Close) | 수익률(%)
#
#       * 수익률은 다음 공식으로 계산하시오 : rt = 100 × ln(Closet/Closet−1). 
# [1.2] KOSPI 지수와 임의의 한 주식을 선택하여 결과를 출력하시오.

remove_list=[]

import os.path 

stocks=pd.DataFrame()
for krx_item in krx_list:
  filename=f"krx/{krx_item}.csv"
  status=True
  if os.path.isfile(filename):
    tmp=pd.read_csv(f"krx/{krx_item}.csv",parse_dates=True) 
    if ('Close' in tmp.columns) and ('Date' in tmp.columns):
      tmp.set_index(tmp['Date'],inplace=True,drop=False) 
      tmp_close=tmp['Close'].rename(krx_item) 
      stocks=pd.concat([stocks,tmp_close],axis=1,sort=True) 
      status=False

  if status:
    remove_list.append(krx_item)

for remove_item in remove_list: 
    krx_list.remove(remove_item)

stocks = stocks.loc[:,~stocks.columns.duplicated()];

# 개별 주식들 close
stocks_close = stocks

# 개별 주식들의 return. log(T시점 종가 / T-1시점 종가)
with np.errstate(divide='ignore'):
    stocks_return = 100 * np.log((stocks_close / stocks_close.shift(1)).astype('float'))

# 코스피 close
kospi = pdr.DataReader('^KS11', 'yahoo', default_start, default_end) #KOSPI
kospi.index = pd.to_datetime(kospi.index).strftime("%Y-%m-%d")  # 기본 format이 time까지 잡혀서 reformat
kospi_close = kospi['Close']
kospi_return = 100 * np.log(kospi_close / kospi_close.shift(1))





stocks_return

# BUG. 몇몇 날짜는 krx.stock 값은 없고 kospi 값만 있음.

# ks = set(kospi.index.strftime("%Y-%m-%d"))
# # print(ks)
# ss = set(stocks.index)
# # print(ss)
# print(sorted(list(ss - ks)))

stocks_close

"""코스피"""

# Get data as dataframe(['Close', 'Lagged Close', 'Return']) of KOSPI or random stock.
# Default Date : 2010.01.04 ~ 2020.11.30

def getStockData (ticker, start=None, end=None) :
  # Setting default values for start day and end day
  if start is None :
    start = default_start
  if end is None :
    end = default_end

  start = start.strftime("%Y-%m-%d")
  end = end.strftime("%Y-%m-%d")  

  df = pd.DataFrame(columns=['Close', 'Lagged Close', 'Return'])

  if ticker == 'kospi' :
    df['Close'] = kospi['Close']
    df['Lagged Close'] = kospi['Close'].shift(1)
  else :
    try : 
      df['Close'] = stocks_close[ticker]
      df['Lagged Close'] = stocks_close[ticker].shift(1)
    except ValueError :
      return df
  
  df['Return'] = 100 * np.log( df['Close'] / df['Lagged Close'] )

  return df.loc[start:end]

문제 1.