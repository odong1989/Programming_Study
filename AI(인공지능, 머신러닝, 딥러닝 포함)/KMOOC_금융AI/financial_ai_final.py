# -*- coding: utf-8 -*-
"""Financial_AI_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-SSgPaANV3pmTe9TOESYxANjFetsNUmO
"""

# 수업명 : AI 금융 - 기말고사(Kmooc)
# 제출일 : 2021년 08월 29일 
# 수험자 : 김보성
# 연락처 : kwunodong@gmail.com

# 비 고 : 문제 코드의 풀이를 위한 주석들이 작성되어있습니다.

# 금융 AI 기말고사 - 주의내용 및 시험목표 안내(출처:fnal_finai)
# 1.주의사항 
# – 주어진 ipynb 파일을 참고하여, 문제를 코딩하여 실행시켜 결과를 출력하여 최종 ipynb 파일을 업로드 해주세요. 
# – 파일은 구글 Colab에서 실행시켜주세요. 

# 2. 기말고사 - 기본사항 안내
# 본 기말고사는 한국거래소에 있는 주식을 대상으로 모멘텀 투자전략의 수익률을 추정해보고자 한다. 
# 예를 들어서, 모멘텀 계산방식은 다음과 같다 
# : 시점 t에서, (한 달 모멘텀 수익률) = (t − 23) 에서 t 시점까지의 종가(Close) 수익률). 
# (1)한 달 기간은 거래일 기준으로 23일로 가정하자. 
# (2)데이터는 ”FinanceDataReader”를 통해서 다운받도록 하자. 
#   (모멘텀 계산 기간: 2010.1.4 – 2020.11.30; 데이터 주기 (frequency) : daily)

# 기말고사 - 문제설명

#-------------------------------------------------------------------------------------------------------------------------------
# [문제 1] (데이터 준비) KOSPI 지수와 개별 주식별로 일별로 두 가지 종류의 데이터를 생성하시오. 다음 아래의 2개문항을 실시하시오.
# [1.1] KOSPI 지수와 개별 주식별로 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
# [1.1.1] KOSPI 지수 - 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
#        | 거래일자 |  KOSPI 지수의 종가(Close) | 수익률(%)
#
# [1.1.2] 개별주식 지수- 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
#        | 거래일자 |  KOSPI 지수의 종가(Close) | 수익률(%)
#
#       * 수익률은 다음 공식으로 계산하시오 : rt = 100 × ln(Closet/Closet−1). 
# [1.2] KOSPI 지수와 임의의 한 주식을 선택하여 결과를 출력하시오. 


#-------------------------------------------------------------------------------------------------------------------------------
# [문제 2] (모멘텀 계산) 개별 주식의 Close를 활용하여 아래의 2개 사항을 수행하시오.
# [2.1] 1개월(23일,1m), 3개월 (65일, 3m), 6개월(130일, 6m), 9개월(190일, 9m), 12개월(253일, 12m) 등의 모멘텀을 계산하시오. 
# [2.2] KOSPI 지수와 임의의 한 주식을 선택하여 결과를 출력하시오. 


#-------------------------------------------------------------------------------------------------------------------------------
# [문제 3] (포트폴리오 구성) 각 모멘텀 기준(1m, 3m, 6m, 9m, 12m), 일별로, 
#          최상 위 주식 20개를 제외한 이후 최상위 10개 주식(best portfolio)(즉, 상위 21∼30위의 10개 주식), 
#          중간순위 10개 주식(median portfolio), 최하위 50개 주식을 제외한 이후의 최하위 10개 주식(worst portfolio)(즉, 하위 51∼60위의 10개 주식)으로 
#          포트폴리오를 구성하시오. 
#
# [3.1] (a) 각 모멘텀 기준(1m, 3m, 6m, 9m, 12m)으로 구성된 각 포트폴리오 의 구성 개별 주식의 모멘텀을 일별(daily)로 출력하시오.
# [3.2] (b) 각 모멘텀 기준(1m, 3m, 6m, 9m, 12m)으로 구성된 각 포트폴리오 의 구성 개별 주식 이름(ticker)을 일별(daily)로 출력하시오. 
#           그리고 새롭게 편입된 종목이름과 퇴출된 종목이름을 일별(daily)로 출력 하시오.
# [3.3] (c) 각 모멘텀 기준(1m, 3m, 6m, 9m, 12m)으로 구성된 각 포트폴리 오의 구성 개별 주식을 1일 보유수익률을 출력하시오. 
#           (t 시점에서 구성되었다면, t시점과 t + 1시점 간의 수익률을 의미함) 
# [3.4] (d) 각 모멘텀 기준(1m, 3m, 6m, 9m, 12m)으로 구성된 각 포트폴리오 의 포트폴리오 일별(daily) 수익률을 계산하시오. 
#           그리고 각 포트폴 리오의 일별(daily) 수익률을 다음과 같이 계산하시오. 
#            * 여기서, p = portfolio (best, median, worst). 
#            * 주의할 것은, i ∈ p 는 t−1시점에서 모멘텀에 의해서 결정되었음. 
#              각 시점에서는 취하 는 행동은 2가지임. 
#              1) 직전의 시점에서 구성된 각 포트폴리오(10 개 주식)의 수익률을 위 식과 같이 계산한다. 
#              2) 그 시점의 모멘텀 을 계산하고, 그 추정된 모멘텀을 기반으로 포트폴리오를 새롭게 구성한다. 
#                (매일 포트폴리오를 rebalance하게 됨. Rebalance 기준은 각 모멘텀. 
#                 포트폴리오 수익률은 포트폴리오 내의 10개 주식의 일별 수익 률의 평균임.
#                 각 모멘텀 기준 (5개)으로 3종류(best, median, worst) 의 포트폴리오가 구성되기 때문에, 
#                 매일 총 15개의 포트폴리오가 구성됨.) 
# [3.5] (e) 15개의 포트폴리오 수익률 데이터를 출력하시오. 


#-------------------------------------------------------------------------------------------------------------------------------
# [문제4] 15개 포트폴리오 수익률과 KOSPI 지수 수익률의 기초통계(평균, 표준 편차, 왜도, 첨도, 평균/표준편차)를 구하시오. 
#         그리고 기초통계를 이용하여, 각 포트폴리오의 특성을 설명하시오. 
# [4.1] 15개 포트폴리오 수익률과 KOSPI 지수 수익률의 기초통계(평균, 표준 편차, 왜도, 첨도, 평균/표준편차)를 구하시오. 
# [4.2] 기초통계를 이용하여, 각 포트폴리오의 특성을 설명하시오. 


#-------------------------------------------------------------------------------------------------------------------------------
# [문제 5] 15개 포트폴리오 수익률과 KOSPI 지수 수익률의 correlation coefficient 를 heatmap으로 나타내고, pairplot을 그리고, 특성을 설명하시오. 
# [5.1] 15개 포트폴리오 수익률과 KOSPI 지수 수익률의 correlation coefficient에 대하여 
# [5.1.1] [5.1]을 heatmap으로 나타내시오.
# [5.1.2] [5.1]의 pairplot을 그리시오.
# [5.1.3] [5.1]의 특성을 설명하시오.


#-------------------------------------------------------------------------------------------------------------------------------
# [문제 6] 15개 포트폴리오 수익률과 KOSPI 지수 수익률의 누적수익률 그래프를 그리시오. 
# [6.1] best vs. KOSPI그래프를 작성하시오. 
# [6.2] median vs. KOSPI 그래프를 작성하시오.
# [6.3] worst vs. KOSPI 그래프를 작성하시오.


#-------------------------------------------------------------------------------------------------------------------------------
# [문제7] 위 결과를 바탕으로 최적의 투자전략을 제시하고, 그 근거를 설명하시오. 


#-------------------------------------------------------------------------------------------------------------------------------
# [문제8] 모멘텀 기간의 변화(23일 ∼ 253일)에 따른 portfolio(best, median, worst) 의 누적수익률을 계산하고 그래프로 출력하시오.
#         * (x축: 모멘텀 기간의 변 화 (23일 ∼ 253일)
#         *  y축: 모멘텀 기간의 변화에 따른 포트폴리오별 최종 시점의 누적수익률 추이) 
# [문제8] 모멘텀 기간의 변화(23일 ∼ 253일)에 따른 portfolio(best, median, worst) 의 누적수익률을 계산하고 그래프로 출력하시오.
# [문제8] 모멘텀 기간의 변화(23일 ∼ 253일)에 따른 portfolio(best, median, worst) 의 누적수익률을 계산하고 그래프로 출력하시오.

!pip install -U finance-datareader;

#주가데이터 분석을 위한 라이브러리 임포트(6-2.다양한 회귀분석 모델 참고.)
import pandas as pd
import numpy as np 
import datetime as dt                  #OSL 추정을 위해 필요.  
import pandas_datareader.data as pdr
import statsmodels.api as sm           #시각화를 위해 필요1
import matplotlib.pyplot as plt        #시각화를 위해 필요2
import seaborn as sns                  #시각화(통계적 상관관계)를 위해 필요.

#
import FinanceDataReader as fdr
from datetime import datetime, timedelta 
import math
from scipy.stats import skew, kurtosis
import csv 
import os.path 
import time

# 한국거래소에 있는 주식의 데이터를 가져옴
krx = fdr.StockListing('KOSPI')  
krx  #기업의 기본정보(기업명, 업종, 설립일,대표자 성명,홈페이지주소 등)

!mkdir krx #파이썬 폴더(경로,디렉토리) 생성
krx

from concurrent import futures
import csv

bad = []
krx_list=krx['Symbol'].tolist() #회사 Symbol만을 추출해서 list로 만든다.
krx_list #  Symbol은 정확히 말하자면 티커(한국주식-숫자6글자로 구성, 미국주식-종목명약자로4자이내구성)가 맞겠다.

# Default Date : 2010.01.04 ~ 2020.11.30
default_start = dt.datetime(2010,1,4)
default_end = dt.datetime(2020,11,30)

def download(krx_item):
    sym=krx_item
    df=fdr.DataReader(sym, default_start, default_end)
    dfnew=df.copy()
    dfnew['Symbol']  =sym
    dfnew.to_csv(f"krx/{sym}.csv", quoting=csv.QUOTE_MINIMAL)    
    
workers = min(30,len(krx))
with futures.ThreadPoolExecutor(workers) as executor: 
    res = executor.map(download, krx_list)

workers

# [문제 1] (데이터 준비) KOSPI 지수와 개별 주식별로 일별로 두 가지 종류의 데이터를 생성하시오. 다음 아래의 2개문항을 실시하시오.
# [1.1] KOSPI 지수와 개별 주식별로 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
# [1.1.1] KOSPI 지수 - 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
#        본 작성자는 아래와 같은 칼럼으로 출력하도록 할 예정.
#        | 거래일자 |  KOSPI 지수의 종가(Close) | 수익률(%) |



# [1.1.2] 개별주식 지수- 일별로 다음 종가(Close) 와 수익률(%)의 두 가지 종류의 데이터를 생성하시오. 
#        본 작성자는 아래와 같은 칼럼으로 출력하도록 할 예정.
#        | 거래일자 |  KOSPI 지수의 종가(Close) | 수익률(%)
#
#       * 수익률은 다음 공식으로 계산하시오 : rt = 100 × ln(Closet/Closet−1). 
# [1.2] KOSPI 지수와 임의의 한 주식을 선택하여 결과를 출력하시오.

remove_list=[]

import os.path 

stocks=pd.DataFrame()
for krx_item in krx_list:
  filename=f"krx/{krx_item}.csv"
  status=True
  if os.path.isfile(filename):
    tmp=pd.read_csv(f"krx/{krx_item}.csv",parse_dates=True) 
    if ('Close' in tmp.columns) and ('Date' in tmp.columns):
      tmp.set_index(tmp['Date'],inplace=True,drop=False) 
      tmp_close=tmp['Close'].rename(krx_item) 
      stocks=pd.concat([stocks,tmp_close],axis=1,sort=True) 
      status=False

  if status:
    remove_list.append(krx_item)

for remove_item in remove_list: 
    krx_list.remove(remove_item)

stocks = stocks.loc[:,~stocks.columns.duplicated()];

# 개별 주식들 close
stocks_close = stocks

# 개별 주식들의 return. log(T시점 종가 / T-1시점 종가)
with np.errstate(divide='ignore'):
    stocks_return = 100 * np.log((stocks_close / stocks_close.shift(1)).astype('float'))

# 코스피 close
kospi = pdr.DataReader('^KS11', 'yahoo', default_start, default_end) #KOSPI
kospi.index = pd.to_datetime(kospi.index).strftime("%Y-%m-%d")  # 기본 format이 time까지 잡혀서 reformat
kospi_close = kospi['Close']
kospi_return = 100 * np.log(kospi_close / kospi_close.shift(1))



stocks_return

# BUG. 몇몇 날짜는 krx.stock 값은 없고 kospi 값만 있음.

# ks = set(kospi.index.strftime("%Y-%m-%d"))
# # print(ks)
# ss = set(stocks.index)
# # print(ss)
# print(sorted(list(ss - ks)))

stocks_close

"""코스피"""

# Get data as dataframe(['Close', 'Lagged Close', 'Return']) of KOSPI or random stock.
# Default Date : 2010.01.04 ~ 2020.11.30

def getStockData (ticker, start=None, end=None) :
  # Setting default values for start day and end day
  if start is None :
    start = default_start
  if end is None :
    end = default_end

  start = start.strftime("%Y-%m-%d")
  end = end.strftime("%Y-%m-%d")  

  df = pd.DataFrame(columns=['Close', 'Lagged Close', 'Return'])

  if ticker == 'kospi' :
    df['Close'] = kospi['Close']
    df['Lagged Close'] = kospi['Close'].shift(1)
  else :
    try : 
      df['Close'] = stocks_close[ticker]
      df['Lagged Close'] = stocks_close[ticker].shift(1)
    except ValueError :
      return df
  
  df['Return'] = 100 * np.log( df['Close'] / df['Lagged Close'] )

  return df.loc[start:end]

문제 1.