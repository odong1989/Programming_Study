# -*- coding: utf-8 -*-
"""4_2행렬 표현.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XGCZ-LS3TlfUcfCj5BpQJlVA0R3FJg0L
"""

#4.0. 필요한 패키지(50페이지)

import numpy as np
import scipy
from scipy import linalg as la
import matplotlib.pyplot as plt

#버전 확인

#넘파이 버전
print(np.__version__)

#scipy 버전
print(scipy.__version__)

#4.2.0 정의 : 2차원 배열(67page)

A = np.array(np.random.RandomState(123).normal(size=16).reshape(4,4))
A.round(3)

#출력결과
#array([[-1.086,  0.997,  0.283, -1.506],
#       [-0.579,  1.651, -2.427, -0.429],
#       [ 1.266, -0.867, -0.679, -0.095],
#       [ 1.491, -0.639, -0.444, -0.434]])

#4.2.1.행렬의 크기(size)

#행렬의 크기

A = np.random.RandomState(123).randint(1, 12, size=12).reshape(3,4)
A.shape

#출력결과
#(3, 4)

#4.2.2. 행벡터와 열벡터
#행벡터(row vector) : 하나의 행으로만 구성도니 행렬.
#열벡터(column vector) : 하나의 열로만 구성된 행렬.

#행벡터와 열벡터
A = np.random.RandomState(123).randint(1, 12, size=12).reshape(3,4)
A
#출력결과
# array([[ 3,  3,  7,  2],
#        [ 4, 11, 10,  7],
#        [ 2,  1,  2, 10]])


#열벡터
A[:,0]
#출력결과
#array([3, 4, 2])


#행벡터
A[0,:]

#출력결과
#array([3, 3, 7, 2])

#4.2.3. 행렬의 표기법

#행벡터와 열벡터(4.2.2.)
A = np.random.RandomState(123).randint(1, 12, size=12).reshape(3,4)
A

#행렬의 표기법 
A[0,0]
#출력결과
#3

A[1,3]
#출력결과
#7

#4.2.4. 행렬연산

#4.2.4.1. 행렬 덧셈

#4.2.4.1.1 행렬 덧셈 예제
A = np.arange(1,7).reshape(2,3)
B = np.arange(3,9).reshape(2,3)

A
#출력결과
#array([[1, 2, 3],
#       [4, 5, 6]])

B
#출력결과
#array([[3, 4, 5],
#       [6, 7, 8]])

A+B

#출력결과
#array([[ 4,  6,  8],
#       [10, 12, 14]])

#--------------------------------------------------------

#4.2.4.1.2 행렬 덧셈의 성질
#(1)교환법칙
A+B == B+A

#출력결과
#array([[ True,  True,  True],
#       [ True,  True,  True]])


#(2)결합법칙
C=np.arange(5,11).reshape(2,3)
(A+B)+C == A+(B+C)

#출력결과
#array([[ True,  True,  True],
#      [ True,  True,  True]])


#--------------------------------------------------------

#4.2.4.2. 스칼라와 행렬의 곱

#스칼라와 행렬 곱
c = 0.1
c*A

#출력결과
#array([[0.1, 0.2, 0.3],
#       [0.4, 0.5, 0.6]])


#--------------------------------------------------------

#4.2.4.3. 행렬의 전치

#행렬의 전치
A.T

#출력결과
#array([[1, 4],
#       [2, 5],
#       [3, 6]])

#72페이지 예제

#행렬 전치의 성질

A = np.arange(1,7).reshape(2,3)
B = np.arange(3,9).reshape(2,3)

A.T + B.T  == (A+B).T

#출력결과
#array([[ True,  True],
#       [ True,  True],
#       [ True,  True]])

c=0.1
(c*A).T == c*A.T
#출력결과
#array([[ True,  True],
#       [ True,  True],
#       [ True,  True]])


#4.2.4.4. 행렬 곱

A=np.arange(1,7).reshape(2,3)
A

#출력결과
#array([[1, 2],
#       [3, 4],
#       [5, 6]])

B = np.arange(1,7).reshape(3,2)
B
#출력결과
#array([[1, 2],
#       [3, 4],
#       [5, 6]])


#행렬곱 연산자 :@
A @ B

#출력결과
#array([[22, 28],
#       [49, 64]])


#행렬 곱 함수
np.matmul(A,B)

#출력결과
#array([[22, 28],
#       [49, 64]])


#74페이지 예제
#행렬 곱의 성질
#AB != BA

A = np.arange(1,5).reshape(2,2)
A

#출력결과
#array([[1, 2],
#       [3, 4]])

B = np.arange(5,9).reshape(2,2)
B
#출력결과
#array([[5, 6],
#       [7, 8]])

A@B
#출력결과
#array([[19, 22],
#       [43, 50]])

B@A
#출력결과
#array([[23, 34],
#       [31, 46]])


#---------------------------------------------------------------

#4.2.4.5. 부분행렬

#부분행렬
A = np.arange(1,13).reshape(4,3)
A

#출력결과
#array([[ 1,  2,  3],
#       [ 4,  5,  6],
#       [ 7,  8,  9],
#       [10, 11, 12]])

#유형1
A[0:2, 1:3]

#출력결과
#array([[2, 3],
#       [5, 6]])

#유형2
A[:, 1:3]

#출력결과
#array([[ 2,  3],
#       [ 5,  6],
#       [ 8,  9],
#       [11, 12]])

#유형3
A[[0,2], :][:, [1,2]]

#출력결과
#array([[2, 3],
#       [8, 9]])

#4.2.5. 특별한 행렬

#4.2.5.1. 영행렬
size=3
np.zeros(shape=(size,size))
#출력결과
#array([[0., 0., 0.],
#       [0., 0., 0.],
#       [0., 0., 0.]])

#--------------------------------------------------

#4.2.5.2 항등행렬
np.identity(n=size)

#출력결과
#array([[1., 0., 0.],
#       [0., 1., 0.],
#       [0., 0., 1.]])


#--------------------------------------------------

#4.2.5.3 대각행렬
np.diag([1,2,3])

#출력결과
#array([[1, 0, 0],
#       [0, 2, 0],
#       [0, 0, 3]])

#--------------------------------------------------

#4.2.5.4 삼각행렬
np.triu([[1,2,3],[1,2,7],[7,8,5]], k=0)

#출력결과
#array([[1, 2, 3],
#       [0, 2, 7],
#       [0, 0, 5]])

#--------------------------------------------------

#4.2.5.5 직교행렬(orthogonal matrix)
A = np.array( [ [1,0], [0,-1] ] )
A
#출력결과
#array([[ 1,  0],
#       [ 0, -1]])


A.T @A
#출력결과
#array([[ 1,  0],
#       [ 0, -1]])


A @A.T
#출력결과
#array([[ 1,  0],
#       [ 0, -1]])